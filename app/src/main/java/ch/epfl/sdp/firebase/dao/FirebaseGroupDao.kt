package ch.epfl.sdp.firebase.dao

import android.util.Log
import androidx.lifecycle.MutableLiveData
import ch.epfl.sdp.firebase.data.SearchGroup
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase

class FirebaseGroupDao : GroupDao {
    private var database: FirebaseDatabase = Firebase.database

    private val groups: MutableLiveData<List<SearchGroup>> = MutableLiveData(mutableListOf())
    private val watchedGroupsById: MutableMap<String, MutableLiveData<SearchGroup>> = mutableMapOf()

    init {
        val myRef = database.getReference("search_groups")
        myRef.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                groups.value = (dataSnapshot.children.map { c ->
                    // Get group data (without key)
                    val group = c.getValue(SearchGroup::class.java)
                    // Retrieve group key generated by google and use it
                    group?.uuid = c.key
                    group!!
                })
            }

            override fun onCancelled(error: DatabaseError) {
                // Failed to read value
                Log.w("FIREBASE", "Failed to read value.", error.toException())
            }
        })
    }

    override fun getGroups(): MutableLiveData<List<SearchGroup>> {
        return groups
    }

    override fun getGroupById(groupId: String): MutableLiveData<SearchGroup> {
        if (!watchedGroupsById.containsKey(groupId)) {
            val myRef = database.getReference("search_groups/$groupId")
            watchedGroupsById[groupId] = MutableLiveData()
            myRef.addValueEventListener(object : ValueEventListener {
                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    watchedGroupsById[groupId]!!.value = dataSnapshot.getValue(SearchGroup::class.java)
                }

                override fun onCancelled(error: DatabaseError) {
                    // Failed to read value
                    Log.w("FIREBASE", "Failed to read value.", error.toException())
                }
            })
        }
        return watchedGroupsById[groupId]!!
    }
}